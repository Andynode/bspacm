# Copyright 2014, Peter A. Bigot
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the software nor the names of its contributors may be
#   used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# BSPACM (http://github.com/pabigot/bspacm) common build support
#
# BSPACM applications can significantly reduce the size of
# application-specific Makefiles by defining BSPACM_ROOT, perhaps
# BOARD, and SRC, then including this file.  Some variables documented
# in this file enable specific features.

# BSPACM_ROOT: Path to root of a BSPACM installation.  This is used to set
# paths for board files.
ifndef BSPACM_ROOT
$(error Must specify BSPACM_ROOT)
endif # BSPACM_ROOT

# Default goal, just to prevent rules added in subordinate makefiles
# from taking precedence.
default: delayed_default

# TOOLCHAIN: The CMSIS standard identifier for the toolchain being used:
# GCC -- GNU Tools for ARM Embedded https://launchpad.net/gcc-arm-embedded
# Future candidates:
# ARM : MDK-ARM
# G++ : Sourcery G++ Lite
# IAR : IAR Embedded Workbench
TOOLCHAIN=GCC

# GNU Make function to convert text+hyphen to upper case+underscore
# (assuming a POSIX shell environment)
uc=$(shell echo $(1) | tr '[a-z-]' '[A-Z_]')

# Function to transform the path to a source file to an object file
# that is to be placed in the board-specific subdirectory.
board_objpath=$(BSPACM_ROOT)/board/$(BOARD)/$(basename $(notdir $(1)))$(OBJ_EXT)

# Function to transform the path to a source file to an object file
# that is to be placed in the current directory.
app_objpath=$(basename $(notdir $(1)))$(OBJ_EXT)

# Variable that is non-empty if buildall is one of the make goals.  In
# that case certain checks are elided.
BYPASS_CHECKS=$(if $(filter buildall,$(MAKECMDGOALS)),1,0)

# Function to generate the rule that builds an object file (in some
# directory) from a source file (in some other directory).  C, C++
# (cc), and assembly files are recognized.  A parallel rule to build
# the dependency file is also created.
define create_makerule
$(1)$$(OBJ_EXT): $(2)
ifeq (.S,$(suffix $(2)))
	$$(CC) $$(CPPFLAGS) $(ASFLAGS) -c -o $$@ $$<
endif # ASM source
ifeq (.c,$(suffix $(2)))
	$$(CC) $$(CPPFLAGS) $$(CFLAGS) -c -o $$@ $$<
endif # C source
ifeq (.cc,$(suffix $(2)))
	$$(CXX) $$(CPPFLAGS) $$(CXXFLAGS) -c -o $$@ $$<
endif # CXX source
ifneq (,$(filter %.c %.cc,$(suffix $(2))))
$(1).d: $(2)
ifeq (.c,$(suffix $(2)))
	$$(TOOLCHAIN_DEP_RULE_CC)
endif # C source
ifeq (.cc,$(suffix $(2)))
	$$(TOOLCHAIN_DEP_RULE_CC)
endif # CXX source
endif # Not ASM source
endef # create_makerule

# At this time we support only the GNU toolchain.
ifneq (GCC,$(TOOLCHAIN))
$(error Unsupported toolchain $(TOOLCHAIN))
endif # TOOLCHAIN

CROSS_COMPILE ?= arm-none-eabi-
CC=$(CROSS_COMPILE)gcc
CXX=$(CROSS_COMPILE)g++
LD=$(CROSS_COMPILE)ld
AR=$(CROSS_COMPILE)ar
SIZE=$(CROSS_COMPILE)size
OBJCOPY=$(CROSS_COMPILE)objcopy
LS=ls

# Rule to build a dependency file from a C source file using GCC
define TOOLCHAIN_DEP_RULE_CC
	set -e; $(RM) $@; \
	 $(CC) -MM -MT$*.o $(CPPFLAGS) $(CFLAGS) $< > $@.$$$$; \
	 sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	 $(RM) $@.$$$$
endef # TOOLCHAIN_DEP_RULE_CC

# Rule to build a dependency file from a C++ source file using GCC
define TOOLCHAIN_DEP_RULE_CXX
	set -e; $(RM) $@; \
	 $(CXX) -MM -MT$*.o $(CPPFLAGS) $(CXXFLAGS) $< > $@.$$$$; \
	 sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	 $(RM) $@.$$$$
endef # TOOLCHAIN_DEP_RULE_CXX

# TARGET_CPPFLAGS: Target-specific preprocessor flags.
TARGET_CPPFLAGS ?=

# TARGET_MFLAGS: Target-specific machine flags.  These are -mthumb and
# similar options that have to go in CFLAGS, LDFLAGS, ASFLAGS, and
# other places the C compiler driver is used.
TARGET_MFLAGS ?=

# TARGET_CFLAGS: Target-specific C compiler options.
TARGET_CFLAGS ?=

# TARGET_ASFLAGS: Target-specific assembler-with-cpp options.
TARGET_ASFLAGS ?=

# TARGET_LDFLAGS: Target-specific linker options
TARGET_LDFLAGS ?=

# BOARD: Standard nomenclature for a particular board with particular
# features.  This may define things on its own, but primarily it
# includes the specific device within the device/series/line/device
# hierarchy.  That in turn defines DEVICE, ARM_PROCESSOR, and other
# flags, and includes parent line and series definitions.
ifeq (0,$(BYPASS_CHECKS))
ifndef BOARD
$(error No BOARD identified)
endif # BOARD
include $(BSPACM_ROOT)/board/$(BOARD)/Makefile.board
endif # BYPASS_CHECKS

# DEVICE: The specific microcontroller for which the application is to
# be built.  Must be defined, probably (indirectly) by Makefile.board.
# DEVICE must be defined; parent identifiers DEVICE_SERIES (tm4c,
# efm32) and DEVICE_LINE (tm4c123, efm32gg) are optional.
ifeq (0,$(BYPASS_CHECKS))
ifndef DEVICE
$(error No DEVICE identified)
endif # DEVICE
endif # BYPASS_CHECKS

# EVALUATE_AFTER_BOARD_INCLUSION: Optional Make variable that expands
# into Makefile source that needs to be evaluated after the
# BOARD/DEVICE/DEVICE_SERIES/DEVICE_LINE material has been defined.
# For example, an application that needs extra source files out of the
# vendor library.  Normally by the time control returns to the
# application Makefile, SRC has already been processed into OBJ and
# DEP and other items, and it's too late to add anything.
ifdef EVALUATE_AFTER_BOARD_INCLUSION
$(eval $(call EVALUATE_AFTER_BOARD_INCLUSION))
endif # EVALUATE_AFTER_BOARD_INCLUSION

# Default to a device-specific but application-independent linker
# script that's in the BSPACM device directory.
TARGET_LDSCRIPT ?= $(BSPACM_ROOT)/toolchain/$(TOOLCHAIN)/gcc_arm.ld
TARGET_LDFLAGS += -Wl,-T,$(TARGET_LDSCRIPT)

# Path to the device-specific memory.ld script that will be included
# by the default TARGET_LDSCRIPT.
DEVICE_LDSCRIPT_PATH ?= $(BSPACM_ROOT)/device/$(DEVICE_SERIES)/$(DEVICE_LINE)/$(DEVICE)
TARGET_LDFLAGS += -L$(DEVICE_LDSCRIPT_PATH)

# Extra preprocessor flags used when compiling the startup code.

# STARTUP_STACK_SIZE: Explicit definition of the number of bytes to
# reserve for the initial stack.  This should almost certainly be a
# multiple of four.
STARTUP_STACK_SIZE ?= 0x400
STARTUP_CPPFLAGS += -D__STACK_SIZE=$(STARTUP_STACK_SIZE)

# STARTUP_HEAP_SIZE: Explicit definition of the number of bytes to
# reserve for the heap.  This should almost certainly be a multiple of
# four.
STARTUP_HEAP_SIZE ?= 0
STARTUP_CPPFLAGS += -D__HEAP_SIZE=$(STARTUP_HEAP_SIZE)

# Unless told otherwise, use the standard startup source for the
# toolchain.
CMSIS_STARTUP_SRC ?= $(BSPACM_ROOT)/toolchain/$(TOOLCHAIN)/startup_ARMC$(ARM_PROCESSOR).S

# CMSIS_SYSTEM_SRC : The source file that provides the CMSIS system
# layer for the device; normally defined in Makefile.series or
# Makefile.line.  If nobody's provided one, ensure the startup does
# not try to invoke functions from it.
ifdef CMSIS_SYSTEM_SRC
CMSIS_SYSTEM_OBJ = $(call app_objpath, $(CMSIS_SYSTEM_SRC))
OBJ += $(CMSIS_SYSTEM_OBJ)
else # CMSIS_SYSTEM_SRC
STARTUP_CPPFLAGS += -D__NO_SYSTEM_INIT
endif # CMSIS_SYSTEM_SRC

# Provide the device pinmux map, which is normally defined at the
# board level but can be overridden by applications or other layers.
# The object file is application-specific.
PERIPH_CONFIG_SRC ?= $(BSPACM_ROOT)/board/$(BOARD)/src/periph_config.c

# __STARTUP_USE_UNIQUE_DEFAULT_HANDLER : An extension to generate
# unique default handlers so when one gets invoked unexpectedly you
# can tell which one needs to be provided (or at least what caused the
# fault).
STARTUP_CPPFLAGS += -D__STARTUP_USE_UNIQUE_DEFAULT_HANDLER

# OPT_CFLAGS: CFLAGS related to optimization and debugging.  The
# default enables debugging and optimizes for size.  Look for garbage
# collection override later and review OPT_LDFLAGS.
OPT_CFLAGS = -ggdb -Os

# OPT_LDFLAGS: LDFLAGS related to optimization and debugging.  Look
# for garbage collection override after optional flags added.
OPT_LDFLAGS =

# BSPACM_LDFLAGS: LDFLAGS required to support BSPACM.  The expectation
# is that any shared libraries that are not application-specific will
# be placed in board directory.
BSPACM_LDFLAGS=-L$(BSPACM_ROOT)/board/$(BOARD)

# GENERATED_ARCHIVES: Generated files, such as archives (not -llibname
# directives), that will be referenced through LDLIBS (as opposed to
# OBJ) but that cannot be assumed to exist a priori.  These are added
# as an order-only dependency to the target executable, and are
# normally built to be stored in the board directory.
GENERATED_ARCHIVES += $(BOARD_LIBBSPACM_A)

# BSPACM_LDLIBS: Library arguments required to support BSPACM.  These
# are core libraries which have tricky interdependencies and may or
# may not be present.
BSPACM_LDLIBS=-lbspacm

# NEWLIB_SBRK: Select the BSPACM implementation of sbrk that is
# desired.  Reserved heap (STARTUP_HEAP_SIZE) and stack sizes
# (STARTUP_STACK_SIZE) influence the behavior of different policies.
# Options are:
#  (empty string): no non-trivial _sbrk provided automatically
#  heap: allocate from a fixed heap; see STARTUP_HEAP_SIZE
#  fatal: any invocation of _sbrk will invoke _newlib_sbrk_error
#  fixedstack: heap grows to bottom of fixed stack (use if active stack is in task memory)
#  dynstack: heap and stack grow towards each other, no minimum stack reservation
#  unlimitedstack: heap and stack grow towards each other, minimum stack size reserved
# For specific details on the policy see the implementation in
# src/newlib/sbrk.c.
NEWLIB_SBRK ?= unlimitedstack
ifneq (,$(NEWLIB_SBRK))
# Force desired symbol to be undefined so it's located, then define
# _sbrk to reference it.
BSPACM_LDFLAGS += -Wl,--undefined=_bspacm_sbrk_$(NEWLIB_SBRK),--defsym=_sbrk=_bspacm_sbrk_$(NEWLIB_SBRK)
endif # NEWLIB_SBRK

# WITH_NANO: The gcc-arm-embedded toolchain offers a space-optimized
# variant of newlib which is much smaller.
WITH_NANO ?= 1
ifneq (0,$(WITH_NANO))
LIBC_FLAG=-lc_s
OPT_LDFLAGS += -specs=nano.specs
else # WITH_NANO
LIBC_FLAG=-lc
endif # WITH_NANO

# Unconditionally add the flags for link-time optimization by removing
# unreferenced code and data.
override OPT_CFLAGS += -ffunction-sections -fdata-sections
override OPT_LDFLAGS += -Wl,-gc-sections

# WARN_CFLAGS: CFLAGS that control warnings
WARN_CFLAGS ?= -Wall -Wno-main

# WITH_WARN_ERROR: If not set to zero, adds -Werror which causes all
# warnings to be treated as errors.
WITH_WARN_ERROR ?= 1
ifneq (0,$(WITH_WARN_ERROR))
WARN_CFLAGS += -Werror
endif # WITH_WARN_ERROR

# STD_CFLAGS: CFLAGS to select C language standard conformance.
STD_CFLAGS ?= -std=c99

# STD_CXXFLAGS : CXXFLAGS to select C++ language standard conformance.
# BSPACM assumes C++11.
STD_CXXFLAGS ?= -std=c++11

# RT_CXXFLAGS: CXXFLAGS to control runtime support facilities.  The
# defaults disable the infrastructure for runtime type inference and
# for exceptions.
RT_CXXFLAGS ?= -fno-rtti -fno-exceptions

# Aggregate individual flags
CPPFLAGS = $(TARGET_CPPFLAGS)
# Provide board and device information for source code reference.
CPPFLAGS += -DBSPACM_BOARD_$(call uc,$(BOARD))
CPPFLAGS += -DBSPACM_DEVICE_SERIES_$(call uc,$(DEVICE_SERIES))
CPPFLAGS += -DBSPACM_DEVICE_LINE_$(call uc,$(DEVICE_LINE))
CPPFLAGS += -DBSPACM_DEVICE_$(call uc,$(DEVICE))

# Allow each layer to override the standard include hierarchy.
# The priority is: BOARD > DEVICE > LINE > SERIES > BSPACM
# Each include subdirectory should support <bspacm/internal/file.h>,
# i.e. taken in order they provide the bspacm/internal hierarchy.
CPPFLAGS += -I$(BSPACM_ROOT)/board/$(BOARD)/include
CPPFLAGS += -I$(BSPACM_ROOT)/device/$(DEVICE_SERIES)/$(DEVICE_LINE)/$(DEVICE)/include
CPPFLAGS += -I$(BSPACM_ROOT)/device/$(DEVICE_SERIES)/$(DEVICE_LINE)/include
CPPFLAGS += -I$(BSPACM_ROOT)/device/$(DEVICE_SERIES)/include
CPPFLAGS += -I$(BSPACM_ROOT)/include

# Tell the application which toolchain is being used
CPPFLAGS += -DBSPACM_CORE_TOOLCHAIN_$(TOOLCHAIN)

CFLAGS = $(WARN_CFLAGS) $(STD_CFLAGS) $(OPT_CFLAGS) $(TARGET_CFLAGS) $(TARGET_MFLAGS)
CXXFLAGS = $(WARN_CFLAGS) $(STD_CXXFLAGS) $(RT_CXXFLAGS) $(OPT_CFLAGS) $(TARGET_CFLAGS) $(TARGET_MFLAGS)
ASFLAGS = $(TARGET_ASFLAGS) $(TARGET_MFLAGS)
LDFLAGS = $(BSPACM_LDFLAGS) $(OPT_LDFLAGS) $(TARGET_LDFLAGS) $(TARGET_MFLAGS)

# Most applications will need something from a vendor-specific
# library, which is normally identified in Makefile.series.  Add the
# archive to the order dependencies, and the link argument to
# BSPACM_LDLIBS.
ifdef BOARD_LIBVENDOR_A
VENDOR_LDLIB=$(patsubst lib%.a,-l%,$(notdir $(BOARD_LIBVENDOR_A)))
GENERATED_ARCHIVES += $(BOARD_LIBVENDOR_A)
BSPACM_LDLIBS += $(VENDOR_LDLIB)
endif # BOARD_LIBVENDOR_A

# The name of the board-specific library holding BSPACM common
# implementation.
BOARD_LIBBSPACM_A=$(BSPACM_ROOT)/board/$(BOARD)/libbspacm.a

# The list of full paths to sources to components going into
# $(BOARD_LIBBSPACM_A).  This does not include startup code.  It does
# include device-agnostic code from the root src directory, as well as
# device-specific code from device src directories.  By convention,
# the latter have base file names that end in underscore, to
# distinguish periph/uart.c (the high-level interface) from
# periph/uart_.c (the device-specific interface).
BOARD_LIBBSPACM_SRC ?=
BOARD_LIBBSPACM_SRC += $(BSPACM_ROOT)/src/periph/uart.c
BOARD_LIBBSPACM_SRC += $(BSPACM_ROOT)/src/utility/console.c

# At this time, all boards implement their LED infrastructure at the
# device series level, so if nobody's provided utility/led_.c add it
# from that layer.
ifeq (,$(filter %/src/utility/led_.c,$(BOARD_LIBBSPACM_SRC)))
BOARD_LIBBSPACM_SRC += $(BSPACM_ROOT)/device/$(DEVICE_SERIES)/src/utility/led_.c
endif # utility/led_.c

# Newlib system components.  These are added to libbspacm so they can
# be found or overridden as desired.
BOARD_LIBBSPACM_SRC += $(BSPACM_ROOT)/src/newlib/sbrk.c
BOARD_LIBBSPACM_SRC += $(BSPACM_ROOT)/src/newlib/nosys.c

# The object files that comprise BOARD_LIBBSPACM_A.
BOARD_LIBBSPACM_OBJ=$(foreach src,$(BOARD_LIBBSPACM_SRC),$(call board_objpath,$(src)))

# Rebuild LIBBSPACM if changes occur to sources or dependencies
DEP += $(BOARD_LIBBSPACM_OBJ:%$(OBJ_EXT)=%.d)

# Only remove the LIBBSPACM object files with realclean; otherwise the
# board library gets rebuilt every time we clean an application.
REALCLEAN += $(BOARD_LIBBSPACM_OBJ)

# Remove the generated archives on realclean
REALCLEAN += $(GENERATED_ARCHIVES)

# All BSPACM libraries, in the order they must be searched.  For
# example, the fdops library must be searched before the nosys
# elements in the core bspacm library.  If the application doesn't use
# one of these, that's fine; it won't be added.
ORDERED_BSPACM_LDLIBS=$(VENDOR_LDLIB) -lbspacm

# Include the generated library options when linking, in the required
# order, and in a group so dependency cycles are resolved.
LDLIBS += -Wl,--start-group $(LIBC_FLAG) \
  $(foreach lib,$(ORDERED_BSPACM_LDLIBS),$(filter $(lib),$(BSPACM_LDLIBS))) \
  $(filter-out $(ORDERED_BSPACM_LDLIBS),$(BSPACM_LDLIBS)) \
 -Wl,--end-group

# Append any extra flags pre-defined in the Makefile (AUX_*) or passed
# on the make command line (EXT_*).
CPPFLAGS += $(AUX_CPPFLAGS) $(EXT_CPPFLAGS)
CFLAGS += $(AUX_CFLAGS) $(EXT_CFLAGS)
ASFLAGS += $(AUX_ASFLAGS) $(EXT_ASFLAGS)
LDFLAGS += $(AUX_LDFLAGS) $(EXT_LDFLAGS)
LDLIBS += $(AUX_LDLIBS) $(EXT_LDLIBS)

# If any source file is C++, use CXX for linking; otherwise use CC.
ifeq (,$(filter %.cc,$(SRC)))
LINKER=$(CC)
else # linker
LINKER=$(CXX)
endif # linker

# Normal compilers use .o for object files.  TI's uses .obj, and defines
# OBJ_EXT above.
OBJ_EXT ?= .o

# Utility function to replace the .c, .cc, and .S suffixes of some set
# of source files with some derived file extension.
subst_suffix=$(patsubst %.c,%$(1),$(patsubst %.cc,%$(1),$(patsubst %.S,%$(1),$(2))))

# Utility function to replace the .c, .cc, and .S suffixes in $(SRC)
# with some derived file extension.
subst_src_suffix=$(call subst_suffix,$(1),$(SRC))

# Object files derive from C source files and preprocessed assembly files
OBJ += $(call subst_src_suffix,$(OBJ_EXT))

# Dependency files derive from anything that was preprocessed.  I'd like
# these stuffed in a hidden subdirectory, haven't worked that one yet.
# Also see http://locklessinc.com/articles/makefile_tricks/
DEP += $(call subst_src_suffix,.d)

# The CMSIS startup routine is currently considered
# application-specific, although its source is probably not the
# application source directory.
CMSIS_STARTUP_OBJ=$(call app_objpath, $(CMSIS_STARTUP_SRC))
OBJ += $(CMSIS_STARTUP_OBJ)

# The peripheral configuration data structures are also
# application-specific, though the source may be in the board-specific
# directory.
PERIPH_CONFIG_OBJ=$(call app_objpath, $(PERIPH_CONFIG_SRC))
OBJ += $(PERIPH_CONFIG_OBJ)

# BSPACM_INHIBIT_MAKE_RULES: Define to a nonzero value to exclude the
# Make rules while leaving all the variable declarations in place.
# This allows the BSPACM build infrastructure to provide toolchain
# and platform declarations to an external build infrastructure
# like that for Contiki, which wants to provide its own rules.
BSPACM_INHIBIT_MAKE_RULES ?= 0
ifeq (0,$(BSPACM_INHIBIT_MAKE_RULES))

# Use GCC to generate dependency files
%.d: %.c
	$(TOOLCHAIN_DEP_RULE_CC)
%.d: %.cc
	$(TOOLCHAIN_DEP_RULE_CXX)

# Object file derived from C source
%.o: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -c -o $@ $<

# Object file derived from assembler source including preprocessor
%.o: %.S
	$(CC) $(CPPFLAGS) $(ASFLAGS) -c -o $@ $<

# Interleaved source/object-code/asm listing
%.lst: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) -ggdb -Wa,-ahdlns=$@ -c $<
CLEAN += $(call subst_src_suffix,.lst)

# On realclean remove all object files even if they aren't in $(OBJ)
# (e.g., when BOARD is not set).  Note the pattern may be
# toolchain-dependent.
REALCLEAN_OBJ ?= *.o
REALCLEAN += $(REALCLEAN_OBJ)

# AOUT.axf: The name of the application image as Arm Executable
AOUT.axf = app.axf

# The default rule
.PHONY: delayed_default
delayed_default: $(AOUT.axf)

# Build the executable; make sure the subset of LDLIBS that's the
# responsibility of the BSPACM infrastructure is built first.
$(AOUT.axf): $(OBJ) | $(GENERATED_ARCHIVES)
	$(LINKER) -v -o $@ $(LDFLAGS) $(OBJ) $(LDLIBS)
	$(SIZE) $@

# AOUT.bin: The name of the application image as binary
AOUT.bin = $(AOUT.axf:%.axf=%.bin)
$(AOUT.bin): $(AOUT.axf)
	$(OBJCOPY) -O binary $< $@
	@$(LS) -ld $@

# Rule for building the standard startup file.  This uses additional C
# preprocessor flags that might not be appropriate for application
# code.
$(CMSIS_STARTUP_OBJ): $(CMSIS_STARTUP_SRC)
	$(COMPILE.S) $(STARTUP_CPPFLAGS) -o $@ $<

# Create the rule for building the standard system file, if there is
# one.
ifdef CMSIS_SYSTEM_OBJ
$(eval $(call create_makerule,$(basename $(CMSIS_SYSTEM_OBJ)),$(CMSIS_SYSTEM_SRC)))
endif # CMSIS_SYSTEM_OBJ

# Create the rule for building the peripheral configuration definitions.
$(eval $(call create_makerule,$(basename $(PERIPH_CONFIG_OBJ)),$(PERIPH_CONFIG_SRC)))

# CLEAN: Additional files to be removed on make clean
.PHONY: clean
clean:
	-$(RM) $(OBJ) $(CLEAN)

# REALCLEAN: Additional files to be removed on make realclean
.PHONY: realclean
realclean: clean
	-$(RM) $(AOUT.bin) $(AOUT.axf) $(DEP) $(REALCLEAN) *.d *.o

# device Makefile.series generally defines a make function that
# expands to the command used to write an image to a board.
.PHONY: install
install: $(AOUT.bin)
	$(call DO_FLASH_IMAGE,$^)

# Generate rules to build each component of $(BOARD_LIBBSPACM_A).
# Object files are stored in the board directory.
$(foreach src,$(BOARD_LIBBSPACM_SRC),$(eval $(call create_makerule, $(basename $(call board_objpath, $(src))), $(src))))

# Don't bother with dependencies or trickiness: just whack everything
# in the emlib src area into an archive that's stored in the board
# directory.
$(BOARD_LIBBSPACM_A): $(BOARD_LIBBSPACM_OBJ)
	$(AR) cr $@ $^

# Dummy rule to manually build libbspacm for the current board
.PHONY: libbspacm
libbspacm: $(BOARD_LIBBSPACM_A)

ifdef BOARD_LIBVENDOR_A
# Dummy rule to manually build libvendor
.PHONY: libvendor
libvendor: $(BOARD_LIBVENDOR_A)
endif # BOARD_LIBVENDOR_A

# Include dependencies unless we're cleaning or doing buildall
ifeq ($(filter-out realclean clean emit-test-platforms test-platforms buildall, $(MAKECMDGOALS)),$(MAKECMDGOALS))
-include $(DEP)
endif # make [real]clean

dep:
	@echo $(DEP)
	@echo $(BOARD_LIBBSPACM_SRC)
	@echo $(BOARD_LIBBSPACM_OBJ)

# Get a list of all boards that are known
BOARDS=$(filter-out README%, $(notdir $(wildcard $(BSPACM_ROOT)/board/*)))

# Maintainer rule to build the application for all boards.
.PHONY: buildall
buildall:
	@for b in $(BOARDS) ; do                           \
          echo "=== Building for $${b}" ;                  \
          ( ( $(MAKE) BOARD=$${b} realclean $(AOUT.axf) )  \
            > $${b}.log 2>& 1                              \
            && tail -3 $${b}.log                           \
            && rm -f $${b}.log )                           \
          || break ;                                       \
        done ;                                             \
        if test -f $${b}.log ; then                        \
          echo "FAILED on $${b}:" ;                        \
          cat $${b}.log ;                                  \
        fi

endif # BSPACM_INHIBIT_MAKE_RULES

# Local Variables:
# mode:makefile
# End:
